<body>
  <meta name="csrf-token" content="<%= form_authenticity_token %>"> 

  <div class="flex h-screen justify-center items-center bg-red-50">
    <div class="p-20 bg-white rounded-2xl shadow-xl text-center">
      <div id ="timer" class="text-6xl font-mono  text-sky-900 mb-4">
        00:00
      </div>
      <div class="flex justify-center space-x-4">
        <button id="startTimer" class="px-6 py-2 border rounded  text-sky-900 border-gray-400 hover:bg-red-100 focus:outline-none font-mono">
          start
        </button>
        <button id="onClickPost" class="px-6 py-2 border rounded  text-sky-900 border-gray-400 hover:bg-red-100 focus:outline-none font-mono">
          save
        </button>
      </div>
    </div>
  </div>

  <script>
    const url = "https://jsonplaceholder.typicode.com/posts"
    const getPosts = async () => {
    const res = await fetch(url)
    const data = await res.json()
    await console.log(data)
    } 

    let seconds = 0;
    let minutes = 0;
    let hours = 0;
    let intervalId;

    function toggleTimer() {
      const startButton = document.getElementById("startTimer");
      if (startButton.innerText === "start") {
        startTimer();
        startButton.innerText = "stop"; // テキストを 'stop に変更
      } else {
        stopTimer();
      startButton.innerText = "start"; // テキストを 'start' に戻す
      } 
    }

    function startTimer() {
    startTime = new Date();  // 開始時刻を記録
    intervalId = setInterval(updateTimer, 1000);
    }

    function stopTimer() {
    clearInterval(intervalId);
    endTime = new Date();  // 終了時刻を記録
    }

    function updateTimer() {
    seconds++;
    if (seconds === 60) {
        minutes++;
        seconds = 0;
    }
    if (minutes === 60) {
        hours++;
        minutes = 0;
    }
    const formattedSeconds = seconds.toString().padStart(2, "0");
    const formattedMinutes = minutes.toString().padStart(2, "0");
    const formattedHours = hours.toString().padStart(2, "0");
    document.getElementById("timer").innerText = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
    }

  function onClickPost() {
    console.log("call onClickPost");
    const url = "/stopwatches"; // ベースURLは相対パスに変更
    
    const obj = {
      stopwatch: {
        start_time: startTime.toISOString(),
        end_time: endTime.toISOString()
      }
    };

    console.log(JSON.stringify(obj));
    const csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");
    fetch(url, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": csrfToken
        },
        body: JSON.stringify(obj)
    })
    .then(response => response.json())
    .then(data => console.log(data))
    .catch(error => {
        console.error('Error:', error);
        if (error.response && error.response.data) {
            console.log(error.response.data);
        }
    });
  }

  document.addEventListener('DOMContentLoaded', () => {
    document.getElementById("startTimer").addEventListener("click", toggleTimer);
    document.getElementById("onClickPost").addEventListener("click", onClickPost);
  });
  </script>
</body>

